title As a System, I want to Log, but previous logs are modifiable.
   actor User
    participant UI
    participant EntryPoint
    participant LoggingManager
    participant LoggingServices
    participant LoggingDataAccess
    participant LoggingDataStore
    User->>UI: Start System Event
    activate UI
    //note over UI: 
    
    UI->>EntryPoint:POST HTTPS Request
    activate EntryPoint
    //note over EntryPoint: 
    //note over EntryPoint: Logging is Triggered
    EntryPoint->>EntryPoint:ValidResponse(userEvent:Bool):RC
    //note over EntryPoint: True: 200
    EntryPoint-->>LoggingManager:StartLog(time:Timestamp,\n                   level:Int,\n                   opr:User,\n                   msg:String,\n                   ID:Int,\n                   cat:Int)\n                   :EntryLog
    activate LoggingManager
   // note over Manager: 
   LoggingManager->>LoggingManager:ManValidation(startLog:EntryLog,\n                       expected:EntryLog)\n                       :Valid
    LoggingManager-->>LoggingServices: mngrLogCheck(createLog,\n                          managerTime,\n                          cat,\n                          manValidation)\n                         :ManLog
    activate LoggingServices
  //  note over Services: 
  LoggingServices->>LoggingServices:ServValidation(mngrLogCheck:ManLog,\n                        Expected:ManLog)\n                        :Valid
    LoggingServices-->>LoggingDataAccess: ServLog(mngrLogCheck,\n               sTime,\n               cat,\n               servValidation)\n               :ServiceLog
    activate LoggingDataAccess
    //note over DataAccess: 
    LoggingDataAccess->>LoggingDataAccess:DataValidation(servLog:ServiceLog,\n                        expected:ServiceLog)\n                        :Valid
    LoggingDataAccess-->>LoggingDataStore:TCP connection
    //note over DataStore
    activate LoggingDataStore


    //note over LoggingDataStore: LogTable was overwritten
    LoggingDataStore-->>LoggingDataAccess:Returns 2
    //deactivate LoggingDataStore
    LoggingDataAccess-->>LoggingServices:Return type ServiceLog: False
    LoggingServices-->>LoggingDataAccess:LogError(Time:TimeStamp,\n                Level:Int,\n                Opr:Int,\n                Msg:String,\n                ID:Int,\n                Cat:Int)\n                :LogResult
    LoggingDataAccess-->>LoggingDataStore:TCP connection
    //note over LoggingDataStore: Error Logged
    LoggingDataStore-->>LoggingDataAccess:Return 1
    deactivate LoggingDataStore
    LoggingDataAccess-->>LoggingServices: Return type LogResult: True
    deactivate LoggingDataAccess
    LoggingServices-->>LoggingManager:Return type ManLog: False
    deactivate LoggingServices
    LoggingManager-->>EntryPoint:Return type EntryLog: False
    deactivate LoggingManager
    EntryPoint-->>UI: RC:500
    deactivate EntryPoint
    UI-->>User: "Data Loss.\nCRITICAL LOGGING FAILURE"
    deactivate UI