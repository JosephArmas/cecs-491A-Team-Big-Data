title As a System, I want to handle multiple log requests, so that data is stored properly
   actor User
    participant UI
    participant EntryPoint
    participant LoggingManager
    participant LoggingServices
    participant LoggingDataAccess
    participant LoggingDataStore
    User->>UI: User event is started
    activate UI
    //note over UI: LogInData(UN:String,PW:String,Time:Timestamp,\nLevel:Int,Opr:Int,Msg:String,ID,Cat):LogResult
    
    UI->>EntryPoint:POST HTTPS Request
    activate EntryPoint
    //note over EntryPoint: Logging is Triggered
    EntryPoint->>EntryPoint:ValidResponse(userEvent:Bool):RC
    //note over EntryPoint: True: 200
    EntryPoint-->>LoggingManager:StartLog(time:Timestamp,\n                   level:Int,\n                   opr:User,\n                   msg:String,\n                   ID:Int,\n                   cat:Int)\n                   :EntryLog
    activate LoggingManager
   // note over Manager: 
    LoggingManager->>LoggingManager:ManValidation(startLog:EntryLog,\n                       expected:EntryLog)\n                       :Valid
    LoggingManager-->>LoggingServices: mngrLogCheck(createLog:EntryLog,\n                          managerTime:TimeStamp,\n                          cat:Int,\n                          manValidation:Valid)\n                         :ManLog
    activate LoggingServices
  //  note over Services: 
  LoggingServices->>LoggingServices:ServValidation(mngrLogCheck:ManLog,\n                        Expected:ManLog)\n                        :Valid
LoggingServices-->>LoggingDataAccess: ServLog(mngrLogCheck:ManLog,\n               sTime:TimeStamp,\n               cat:Int,\n               servValidation:Valid)\n               :ServiceLog
    activate LoggingDataAccess
    //note over DataAccess: 
    LoggingDataAccess->>LoggingDataAccess:DataValidation(servLog:ServiceLog,\n                        expected:ServiceLog)\n                        :Valid
    LoggingDataAccess-->>LoggingDataStore:TCP connection
    //note over DataStore
    activate LoggingDataStore
    //note over LoggingDataStore: User event is logged
    LoggingDataStore-->>LoggingDataStore:MVC allows multiple writers
    LoggingDataStore-->>LoggingDataAccess:Returns 1
    deactivate LoggingDataStore
    LoggingDataAccess-->>LoggingServices:Return type ServiceLog: True
    deactivate LoggingDataAccess
    LoggingServices-->>LoggingManager: Return ManLog: True
    deactivate LoggingServices
    LoggingManager-->>EntryPoint: Return type EntryLog: True
    deactivate LoggingManager
    EntryPoint-->>UI: Response Code: 200
    deactivate EntryPoint
    UI-->>User: User Event Logged
    deactivate UI