title As a user, my role hasn't been updated even though I reached to 4.2 rating or higher
actor Authenticated User
participant ReputationView
participant Console
participant ReputationController
participant ReputationManager
participant ReputationService
participant ReputationDataAccess
participant Logging
participant LoggingDataAccess
participant SQLServer
activate Authenticated User

note over Authenticated User: User must be on Reputation View

Authenticated User ->> ReputationView: User submits a report of\nanother User and their\nrating becomes >= 4.2
activate ReputationView

box over ReputationView: const reputationService = "/reputation/report";\nlet userReport = {"userReportedID" : " ",\n																												"rating" : " ",\n																												"feedback: " ",\n																												"userReportingID" : " "}; 
 
ReputationView ->> Console:axios.post(reputationService, userReport).then(response=>{}): JSON Object
activate Console

Console ->> ReputationController: [Route("report")]\n[HttpPost]\nPostUserReport(): Task Object
activate ReputationController

ReputationController ->> ReputationManager: RecordNewUserReport(Reputation Object, UserAccount Object): Task object
activate ReputationManager

ReputationManager ->> ReputationService: UpdateReputation(Reputation Object): Response Object
activate ReputationService

ReputationService ->> ReputationDataAccess: await SelectUserRatings(Reputation Object).ConfigureAwait(false): Task object
activate ReputationDataAccess

ReputationDataAccess ->> SQLServer:ExecuteReader(): SqlDataReader Object
activate SQLServer

SQLServer ->> SQLServer: SELECT rating\nFROM dbo.UserReports\nWHERE reportedUser = userReportedID;
activate SQLServer

SQLServer -->> SQLServer: returns the rating value from the dbo.UserReports\nrow that meets the condition
deactivate SQLServer

SQLServer -->> ReputationDataAccess: return SqlDataReader Object
deactivate SQLServer

box over ReputationDataAccess: double rows = 0.0;
group while(reader.Read())
box over ReputationDataAccess: rows = rows + 1.0;\ndouble newRating = rating + newRating;
end

box over ReputationDataAccess: newRating = newRating / rows + 1.0;

ReputationDataAccess -->> ReputationService: return Task
deactivate ReputationDataAccess

group if (result.isSuccessful)
ReputationService ->> ReputationDataAccess: await UpdateUserReputation(Reputation Object, double newRating): Task Object
activate ReputationDataAccess
end

ReputationDataAccess ->> SQLServer: ExecuteNonQuery(): Int32 
activate SQLServer

SQLServer ->> SQLServer: UPDATE dbo.UserProfile\nSET reputation = newRating\nWHERE reportedUser = 'newReport._reportedUser';
activate SQLServer

SQLServer -->> SQLServer: returns "You have made changes to the database. Rows affected: 1"
deactivate SQLServer

SQLServer -->> ReputationDataAccess: return 1
deactivate SQLServer

ReputationDataAccess -->> ReputationService: return Task Object
deactivate ReputationDataAccess

group if (reputation >= 4.2) 
ReputationService ->> ReputationDataAccess: await RegularUserPromotion().ConfigureAwait(): Task Object
activate ReputationDataAccess
end

ReputationDataAccess ->> SQLServer: ExecuteNonQuery(): Int32
activate SQLServer

SQLServer ->> SQLServer: UPDATE dbo.UserProfile\nSET roleType = "Reputable"\nWHERE userID = UserAccount.UserID 
activate SQLServer

SQLServer -->> SQLServer: returns error
deactivate SQLServer

SQLServer -->> ReputationDataAccess: return 0
deactivate SQLServer



ReputationDataAccess ->> Logging: Log(Log log): Response Object
activate Logging

Logging ->> LoggingDataAccess: await Execute(String insertSql).ConfigureAwait(false): Task Object
activate LoggingDataAccess

LoggingDataAccess ->> SQLServer: ExecuteNonQuery(): Int32
activate SQLServer

SQLServer ->> SQLServer: INSERT INTO dbo.Logs (CorrelationID, LogLevel, UserHash, [Event], Category, [Message])\nVALUES (1, 'Error', 'log._userHash', 'ReputationService.UpdateReputation()', 'app.Reputation', 'User Reputation Updated Successfully');
activate SQLServer

SQLServer -->> SQLServer: returns "You have made changes to the database. Rows affected: 1"
deactivate SQLServer

SQLServer -->> LoggingDataAccess:  return 1 
deactivate SQLServer

LoggingDataAccess -->> Logging: return Task Object
deactivate LoggingDataAccess

Logging -->> ReputationDataAccess: return Response Object
deactivate Logging

ReputationDataAccess -->> ReputationService: return Task Object (isSuccessful = false)
deactivate ReputationDataAccess

ReputationService -->> ReputationManager: return Response Object (Response.isSuccessful = false)
deactivate ReputationService

group if (!response.isSuccessful) 
ReputationManager -->> ReputationController: return Task Object (isSuccessful = false)
deactivate ReputationManager
end

ReputationController -->> Console: return Task Object (isSuccessful = false)
deactivate ReputationController

Console -->> ReputationView: returns response JSON Object
deactivate Console

ReputationView -->> Authenticated User: Displays error "User's role type has not updated successfully"
deactivate ReputationView

deactivate Authenticated User