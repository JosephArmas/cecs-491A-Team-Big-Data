title As a user, I want to successfully report another user and affect their reputation score

actor Authenticated User
participant View
participant Console
participant Controller
participant Manager
participant Service
participant Model
participant Logging
participant DataAccess
participant ErrorResponse
participant SQLServer
activate Authenticated User

note over Authenticated User: User must be Reputation View

Authenticated User ->> View: User submits a report of\n					 				another User 
activate View

box over View: const reputationService = "/reputation/report"\nlet userReport = {} 
 
View ->> Console:axios.post(reputationService, userReport).then(response=>{}): response JSON object
activate Console

Console ->> Controller: app.Run(): Task object
activate Controller

Controller ->> Model: Reputation newUserReputationReport = new Reputation(): Reputation object
activate Model

Model -->> Controller: return Reputation object
deactivate Model

Controller ->> Model: UserAccount actorUserAccount = new UserAccount(): UserAccount object
activate Model

Model -->> Controller: return UserAccount object
deactivate Model

Controller ->> Manager: ReputationManager repManager = new ReputationManager(): ReputationManager object
activate Manager

Manager -->> Controller: return ReputationManager object

Controller ->> Manager: var response = repManager.RecordNewUserReport(newUserReputationReport, actorUserAccount): Task object

Manager ->> ErrorResponse: Response response = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> Manager: return Response object
deactivate ErrorResponse

Manager ->> Service: ReputationService repService = new ReputationService(): ReputationService object 
activate Service

Service -->> Manager: return ReputationService object

Manager ->> Service: response = repService.StoreNewUserReport(ref newReport): Response object

Service ->> Model: UserAccount reputationRatedUserAccount = new UserAccount(): UserAccount object
activate Model

Model -->> Service: return UserAcount object 
deactivate Model

Service ->> DataAccess: IDBSelector userDatabase = new SqlDAO(userAccountConnectionString): IDBSelector SqlDAO object
activate DataAccess

DataAccess -->> Service: return IDBSelector SqlDAO object

Service ->> DataAccess: var getUserHash = await userDatabase.SelectUserAccount(ref reputationRatedUserAccount, newReport._reportedUser).Result: Task object

DataAccess ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> DataAccess: return Response object
deactivate ErrorResponse

DataAccess ->> SQLServer: var rows = command .ExecuteNonQuery(): OUTPUT clause
activate SQLServer

box over SQLServer: SELECT *\nFROM dbo.Users\nWHERE username = newReport.reportedUser;

SQLServer -->> DataAccess: returns all rows from dbo.Users that meet the condition
deactivate SQLServer

DataAccess -->> Service: return Task object
deactivate DataAccess

box over Service: newReport._reportedUser = userHash;

group if (result.isSuccessful)
Service ->> DataAccess: IDBInserter insertReport = new SqlDAO(reputationConnectionString): IDBInserter SqlDAO object
activate DataAccess

DataAccess -->> Service: return IDBInserter SqlDAO object

Service ->> DataAccess: var result = await insertReport.InsertUserReport(newReport).ConfigureAwait(false): Task object
end

DataAccess ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> DataAccess: return Response object
deactivate ErrorResponse

DataAccess ->> SQLServer:  rows = command .ExecuteNonQuery(): OUTPUT clause
activate SQLServer

box over SQLServer: INSERT INTO dbo.UserReports(rating, feedback, reportedUser)\nVALUES(newReport._rating, 'newReport._feedback', 'newReport_reportedUser);

SQLServer -->> DataAccess: returns "You have made changes to the database. Rows affected: 1"
deactivate SQLServer

DataAccess -->> Service: return Task object
deactivate DataAccess

Service -->> Manager: return Response object
deactivate Service

Manager ->> Logging: Logger newUserReportLog = Log(actorUserAccount): Response object
activate Logging

Logging ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> Logging: return Reponse object
deactivate ErrorResponse

Logging ->> DataAccess: Response logReturn = await _dao.Execute(insertSql).ConfigureAwait(false): Task object
activate DataAccess

DataAccess ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> DataAccess: return Response object
deactivate ErrorResponse

DataAccess ->> SQLServer: result.data = (new SqlCommand(req.ToString, connect)).ExecuteNonQuery(): OUTPUT clause
activate SQLServer

box over SQLServer: INSERT INTO dbo.Logs (CorrelationID, LogLevel, UserHash, [Event], Category, [Message])\nVALUES (log._correlationID, 'log._logLevel', 'log._user', 'log._event', 'log._category', 'log._message');

SQLServer -->> DataAccess: returns "You have made changes to the database. Rows affected: 1"
deactivate SQLServer

DataAccess -->> Logging: return Task object
deactivate DataAccess
Logging -->> Manager: return Response object
deactivate Logging

group if (response.IsSuccessful) 
Manager ->> Service: Response response = repService.UpdateReputation(newReport): Response object
activate Service
end 

Service ->> DataAccess: IDBSelector getSumRatings = new SqlDAO(reputationConnectionString);
activate DataAccess

DataAccess -->> Service: return IDBSelector SqlDAO object
Service ->> DataAccess: var newRating = await getSumRatings.SelectUserRatings(newReport).ConfigureAwait(false): Task object

DataAccess ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> DataAccess: return Response object
deactivate ErrorResponse

DataAccess ->> SQLServer:var rows = command .ExecuteNonQuery(): OUTPUT clause
activate SQLServer

box over SQLServer: SELECT rating\nFROM dbo.UserReports\nWHERE reportedUser = newReport._reportedUser;

SQLServer -->> DataAccess: returns all rows from dbo.UserReports that meet the condition
deactivate SQLServer

box over DataAccess: double rows = 0.0;
group while(reader.Read())
box over DataAccess: rows = rows + 1.0;\ndouble newRating = rating + newRating;
end

box over DataAccess: newRating = newRating / rows + 1.0;

DataAccess -->> Service: return Task
deactivate DataAccess

group if (result.IsSuccessful)

Service ->> DataAccess: IDBUpdater updateReputation = new SqlDAO(userProfileConnectionString);
activate DataAccess

DataAccess -->> Service: return SqlDAO instance

Service ->> DataAccess: var result = await updateReputation.UpdateUserReputation(newReport, newRating): Task object
end

DataAccess ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> DataAccess: return Response object
deactivate ErrorResponse

DataAccess ->> SQLServer:var rows = command .ExecuteNonQuery(): output
activate SQLServer

box over SQLServer: UPDATE dbo.UserProfile\nSET reputation = newRating\nWHERE reportedUser = 'newReport._reportedUser';

SQLServer -->> DataAccess: returns "You have made changes to the database. Rows affected: 1"
deactivate SQLServer

DataAccess -->> Service: return Task object
deactivate DataAccess

Service -->> Manager: return Response object
deactivate Service

Manager ->> Logging: Logger updateRatingLog = Log(actorUserAccount): Response object
activate Logging

Logging ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> Logging: return Reponse object
deactivate ErrorResponse

Logging ->> DataAccess: Response logReturn = await _dao.Execute(insertSql).ConfigureAwait(false): Task object
activate DataAccess

DataAccess ->> ErrorResponse: Response result = new Response(): Response object
activate ErrorResponse

ErrorResponse -->> DataAccess: return Response object
deactivate ErrorResponse

DataAccess ->> SQLServer: result.data = (new SqlCommand(req.ToString, connect)).ExecuteNonQuery(): output
activate SQLServer

box over SQLServer: INSERT INTO dbo.Logs (CorrelationID, LogLevel, UserHash, [Event], Category, [Message])\nVALUES (log._correlationID, 'log._logLevel', 'log._user', 'log._event', 'log._category', 'log._message');

SQLServer -->> DataAccess: returns "You have made changes to the database. Rows affected: 1"
deactivate SQLServer

DataAccess -->> Logging: return Task object
deactivate DataAccess
Logging -->> Manager: return Response object
deactivate Logging

Manager -->> Controller: return Task object
deactivate Manager

Controller -->> Console: return Task object
deactivate Controller

Console -->> View: returns response JSON object
deactivate Console

View -->> Authenticated User: Displays back to user "Report submitted successfully"
deactivate View
deactivate Authenticated User