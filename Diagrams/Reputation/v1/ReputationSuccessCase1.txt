title As a user, I want to successfully report another user and affect their reputation score

actor Authenticated User
participant ReputationView
participant Console
participant ReputationController
participant ReputationModel
participant ReputationManager
participant ReputationService
participant UserAccountModel
participant SqlDAO
participant ErrorResponse
participant SQLServer
activate Authenticated User

Authenticated User ->> ReputationView: User submits a report of\n					 				another User 
activate ReputationView

box over ReputationView: const reputationService = "/reputation/report"\nlet userReport = {} 
 
ReputationView ->> Console:axios.post(reputationService, userReport).then(response=>{})
activate Console


Console ->> ReputationController: app.Run();
activate ReputationController



ReputationController ->> ReputationModel: Reputation newUserRating = new Reputation()
activate ReputationModel


ReputationModel -->> ReputationController: return Reputation instance
deactivate ReputationModel

ReputationController ->> ReputationManager: ReputationManager repManager = new ReputationManager();
activate ReputationManager



ReputationManager -->> ReputationController: return ReputationManager instance

ReputationController ->> ReputationManager: var response = repManager.RecordNewUserReport(NewUserRating);



ReputationManager ->> ReputationService: ReputationService repService = new ReputationService(); 
activate ReputationService

ReputationService -->> ReputationManager: return ReputationServices instance

ReputationManager ->> ReputationService: Response response = repService.StoreNewUserReport(ref newReport).Result;

ReputationService ->> UserAccountModel: UserAccount ratedUserAccount = new UserAccount()
activate UserAccountModel

UserAccountModel -->> ReputationService: return UserAcount instance 
deactivate UserAccountModel

ReputationService ->> SqlDAO: IDBSelector userDatabase = new SqlDao(userAccountConnectionString);
activate SqlDAO



SqlDAO -->> ReputationService: return SqlDAO instance

ReputationService ->> SqlDAO: var userHash = userDatabase.SelectUserAccount(ref ratedUserAccount, newReport.reportedUser);



SqlDAO ->> ErrorResponse: Response result = new Response();
activate ErrorResponse

ErrorResponse -->> SqlDAO: return Response instance
deactivate ErrorResponse

SqlDAO ->> SQLServer: connect.Open();\nvar command = new SqlCommand(updateSql, connection);\nvar rows = command .ExecuteNonQuery();
activate SQLServer

box over SQLServer: SELECT *\nFROM dbo.Users\nWHERE username = newReport.reportedUser;

SQLServer -->> SqlDAO: returns all rows from dbo.Users that meet the condition\nconnect.Close();
deactivate SQLServer

SqlDAO -->> ReputationService: returns result.IsSucessful = true;
deactivate SqlDAO

box over ReputationService: newReport._reportedUser = userHash;

ReputationService ->> SqlDAO: IDBInserter insertReport = new SqlDAO(reputationConnectionString);
activate SqlDAO

SqlDAO -->> ReputationService: return SqlDAO instance

ReputationService ->> SqlDAO: var result = await insertReport.InsertUserReport(newReport).ConfigureAwait(false);



SqlDAO ->> ErrorResponse: Response result = new Response();
activate ErrorResponse



ErrorResponse -->> SqlDAO: return Response instance
deactivate ErrorResponse

SqlDAO ->> SQLServer: connect.Open();\nvar command = new SqlCommand(updateSql, connection);\nvar rows = command .ExecuteNonQuery();
activate SQLServer

box over SQLServer: INSERT INTO dbo.UserReports(rating, feedback, reportedUser)\nVALUES(newReport._rating, 'newReport._feedback', 'newReport_reportedUser);

SQLServer -->> SqlDAO: returns "You have made changes to the database. Rows affected: 1"\nconnect.Close();
deactivate SQLServer

SqlDAO -->> ReputationService: return result.IsSucessful = true;
deactivate SqlDAO

ReputationService -->> ReputationManager: return response.IsSuccessful = true;
deactivate ReputationService

group if (response.IsSuccessful) 
ReputationManager ->> ReputationService: Response response = repService.UpdateReputation(newReport);
activate ReputationService
end 

ReputationService ->> SqlDAO: IDBSelector getSumRatings = new SqlDAO(reputationConnectionString);
activate SqlDAO

SqlDAO -->> ReputationService: return SqlDAO instance
ReputationService ->> SqlDAO: var newRating = await getSumRatings.SelectUserRatings(newReport).ConfigureAwait(false);

SqlDAO ->> ErrorResponse: Response result = new Response();
activate ErrorResponse

ErrorResponse -->> SqlDAO: return Response instance
deactivate ErrorResponse

SqlDAO ->> SQLServer:connect.Open();\nvar command = new SqlCommand(updateSql, connection);\nvar rows = command .ExecuteNonQuery();
activate SQLServer

box over SQLServer: SELECT rating\nFROM dbo.UserReports\nWHERE reportedUser = newReport._reportedUser;

SQLServer -->> SqlDAO: returns all rows from dbo.UserReports that meet the condition\nconnect.Close();

box over SqlDAO: double rows = 0.0;
group while(reader.Read())
box over SqlDAO: rows = rows + 1.0;\ndouble newRating = rating + newRating;
end

box over SqlDAO: newRating = newRating / rows + 1.0;
deactivate SQLServer

SqlDAO -->> ReputationService: return result.IsSuccessful = true;
deactivate SqlDAO

group if (result.IsSuccessful)

ReputationService ->> SqlDAO: IDBUpdater updateReputation = new SqlDAO(userProfileConnectionString);
activate SqlDAO

SqlDAO -->> ReputationService: return SqlDAO instance

ReputationService ->> SqlDAO: var result = await updateReputation.UpdateUserReputation(newReport, newRating);
end

SqlDAO ->> ErrorResponse: Response result = new Response();
activate ErrorResponse

ErrorResponse -->> SqlDAO: return Response instance
deactivate ErrorResponse

SqlDAO ->> SQLServer:connect.Open();\nvar command = new SqlCommand(updateSql, connection);\nvar rows = command .ExecuteNonQuery();
activate SQLServer

box over SQLServer: UPDATE dbo.UserProfile\nSET reputation = newRating\nWHERE reportedUser = 'newReport._reportedUser';

SQLServer -->> SqlDAO: returns "You have made changes to the database. Rows affected: 1"\nconnect.Close();
deactivate SQLServer

SqlDAO -->> ReputationService: return result.IsSucessful = true;
deactivate SqlDAO

ReputationService -->> ReputationManager: return response.isSuccessful = true;
deactivate ReputationService

ReputationManager -->> ReputationController: return tcs.Task
deactivate ReputationManager

ReputationController -->> Console: return tcs.Task;
deactivate ReputationController

Console -->> ReputationView: returns response and status 200
deactivate Console

ReputationView -->> Authenticated User: Displays back to user "Report submitted successfully"
deactivate ReputationView
deactivate Authenticated User