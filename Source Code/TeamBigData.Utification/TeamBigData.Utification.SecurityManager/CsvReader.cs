using Azure.Core;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Diagnostics;
using System.Security.Principal;
//using TeamBigData.Utification.Manager.SecurityManager;
using TeamBigData.Utification.Cryptography;
using TeamBigData.Utification.Models;
using TeamBigData.Utification.ErrorResponse;
using TeamBigData.Utification.SQLDataAccess;

namespace TeamBigData.Utification.Manager
{
    //https://www.c-sharpcorner.com/article/working-with-c-sharp-streamreader/#:~:text=StreamReader%20code%20example.-,C%23%20StreamReader%20is%20used%20to%20read%20characters%20to%20a%20stream,%2C%20line%2C%20or%20all%20content.
    //code was inspired by looking at this webpage

    public class CsvReader
    {
        public RequestType request { get; private set; }
        public string email { get; private set; }
        public string password { get; private set; } = null;

        //autogenerated by Visual Studio
        public CsvReader(RequestType request, string email, string password)
        {
            this.request = request;
            this.email = email;
            this.password = password;
        }
        public enum RequestType
        {
            CREATE,
            UPDATE,
            DELETE,
            DISABLE,
            ENABLE

        }
        public CsvReader()
        {
            RequestType request;
            String email;
            String password;
        }
        public async Task<Response> BulkFileUpload(String filename, UserProfile userProfile)
        {
            var tcs = new TaskCompletionSource<Response>();
            var response = new Response();
            var requests = await ReadFileCsv(filename);
            SecurityManager securityManager = new SecurityManager();

            //Switch cases will handle bulk cases better than ifelse
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            foreach (var line in requests)
            {
                switch (line.request)
                {
                    case RequestType.CREATE:
                        var encryptor = new Encryptor();
                        var encryptedPassword = encryptor.encryptString(line.password);
                        //var hasher = new SecureHasher();
                        response = securityManager.InsertUser(line.email, encryptedPassword, encryptor);
                        
                        break;
                    case RequestType.DELETE:
                        line.password = null;
                        response = securityManager.DeleteProfile(line.email, userProfile);
                        break;
                    case RequestType.UPDATE:
                        //var hasher = new SecureHasher();
                        var connectionString = @"Server=.\;Database=TeamBigData.Utification.Users;Integrated Security = True;Encrypt=False";
                        var userDao = new SqlDAO(connectionString);
                        
                        var digest = SecureHasher.HashString(line.email, line.password);
                        response = userDao.ChangePassword(line.email, digest).Result;
                        //response = securityManager.ChangePassword(line.email, userProfile);
                        break;
                    case RequestType.ENABLE:
                        response = securityManager.EnableAccount(line.email, userProfile).Result;
                        break;
                    case RequestType.DISABLE:
                        response = securityManager.DisableAccount(line.email, userProfile);
                        break;
                    
                }
            }
            if (stopwatch.ElapsedMilliseconds > 60000)
            {
                response.isSuccessful = false;
                response.errorMessage = "Bulk UM operation was NOT successful";
            }
                tcs.SetResult(response);
            return response;

        }
        public async Task<List<CsvReader>> ReadFileCsv(string filename)
        {
            var csvReader = new List<CsvReader>();
            using (StreamReader reader = new StreamReader(filename))
            {
                //reads until end of line
                //ReadToEnd was reccommended during office hours
                var endLineReader = await reader.ReadToEndAsync();
                //foreach is easier to iterate through an array of values
                //Split at the end of each line so that ReadToEnd knows to stop
                foreach (var line in endLineReader.Split('\n'))
                {
                    //need to be able to store each value so that each individul operation can happen
                    //CSV-> Commma Separated Values
                    String[] csvValues = line.Split(',');
                    var request = csvValues[0];
                    var email = csvValues[1];
                    var password = csvValues[2];
                    if (request == "CREATE")
                    {
                        //csvReader.Add(new CsvReader { RequestType.Create, email, password });
                        var insert = new CsvReader(RequestType.CREATE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "UPDATE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.UPDATE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "DELETE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.DELETE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "ENABLE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.ENABLE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "DISABLE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.DISABLE, email, password);
                        csvReader.Add(insert);
                    }

                }
                return csvReader;
            }

        }
        //ReadAllLines might be better for bigger files so I wanted to see
        public async Task<List<CsvReader>> ReadFileCsvReadAll(string filename)
        {
            //var taskReader = TaskCompletionSource < List<CsvReader>();
            var readAll = await File.ReadAllLinesAsync(filename);
            var csvReader = new List<CsvReader>();
            using (StreamReader reader = new StreamReader(filename))
            {

                foreach (var line in readAll)
                {
                    //need to be able to store each value so that each individul operation can happen
                    //CSV-> Commma Separated Values
                    String[] csvValues = line.Split(',');
                    var request = csvValues[0];
                    var email = csvValues[1];
                    var password = csvValues[2];
                    if (request == "CREATE")
                    {
                        //csvReader.Add(new CsvReader { RequestType.Create, email, password });
                        var insert = new CsvReader(RequestType.CREATE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "UPDATE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.UPDATE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "DELETE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.DELETE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "ENABLE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.ENABLE, email, password);
                        csvReader.Add(insert);
                    }
                    else if (request == "DISABLE")
                    {
                        password = null;
                        var insert = new CsvReader(RequestType.DISABLE, email, password);
                        csvReader.Add(insert);
                    }

                }
                return csvReader;
            }
        }
    }

    /*
     * Used links:
     * https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum
     * https://www.w3schools.com/cs/cs_foreach_loop.php
     * https://www.w3schools.com/cs/cs_arrays.php
     * https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.add?view=net-7.0
     * https://www.geeksforgeeks.org/switch-vs-else/
     */
}
